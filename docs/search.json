[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Abdel An‚Äôlah Tidjani",
    "section": "",
    "text": "Student at University of Warwick.  My research areas are microeconomics, political economy, development economics.\n\nRead More ‚Üí"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index - Copy.html",
    "href": "index - Copy.html",
    "title": "webpage",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "Hi There! Welcome.",
    "section": "",
    "text": "I‚Äôm glad you‚Äôre here ‚Äî thanks for visiting my website üòÅ\nI am a dedicated and enthusiastic Statistician specializing in the field of Economics, driven by a profound love for Python programming. With an insatiable curiosity for data and its profound impact on economic phenomena.\nCurrently Economics Student at University of Warwick in Coventry, UK.\nMy research areas are microeconomics, political economy, development economics.\nMaster of Research plus PhD ‚àô University of Warwick ‚àô 2031\nMaster in Mathematics Economics and Statistics (MMES) ‚àô African School of Economics ‚àô 2022\nBachelor in Statistics ‚àô University of Abomey-Calavi | ENEAM ‚àô 2019"
  },
  {
    "objectID": "about/index.html#working-papers",
    "href": "about/index.html#working-papers",
    "title": "Hi There! Welcome.",
    "section": "WORKING PAPERS",
    "text": "WORKING PAPERS\n\n\n\n\nNo matching items\n\n\n\nSee All ‚Üí"
  },
  {
    "objectID": "about/index.html#a-blog-that-works",
    "href": "about/index.html#a-blog-that-works",
    "title": "Hi There!",
    "section": "A BLOG THAT WORKS",
    "text": "A BLOG THAT WORKS\n\n\n\n\nSee All ‚Üí"
  },
  {
    "objectID": "about/index.html#talks-that-last",
    "href": "about/index.html#talks-that-last",
    "title": "Hi There!",
    "section": "TALKS THAT LAST",
    "text": "TALKS THAT LAST\n\n\n\n\nNo matching items\n\n\n\nSee All ‚Üí"
  },
  {
    "objectID": "about/index.html#a-project-that-last",
    "href": "about/index.html#a-project-that-last",
    "title": "Hi There!",
    "section": "A PROJECT THAT LAST",
    "text": "A PROJECT THAT LAST\n\n\n\n\nNo matching items\n\n\n\nSee All ‚Üí"
  },
  {
    "objectID": "about/index.html#last-project",
    "href": "about/index.html#last-project",
    "title": "Hi There! Welcome.",
    "section": "LAST PROJECT",
    "text": "LAST PROJECT\n\n\n    \n            \n                \n            \n        \n            Holiday Plotly Dash Challenge\n            \n                \n                    Plotly\n                \n                \n                    Dash\n                \n                \n                    Python\n                \n                \n                    Churn\n                \n            \n            \n        \n    \n\n\nNo matching items\n\n\n\nSee All ‚Üí"
  },
  {
    "objectID": "about/index.html#last-talks",
    "href": "about/index.html#last-talks",
    "title": "Hi There!",
    "section": "LAST TALKS",
    "text": "LAST TALKS\n\n\n            \n                \n                    \n                \n                \n                    \n                        Political Economy T.A session \n                    \n                    \n                        Oct 31, 2022 ‚àô \n                        African School of Economics, Abomey-Calavi\n                    \n                    I Provided training and guidance in Python and R for data analysis and visualization of Political and Conflict Events using ACLED data.\n                    \n                        \n                            \n                                 Slides\n                            \n                        \n                    \n                \n            \n\n\nNo matching items\n\n\n\nSee All ‚Üí"
  },
  {
    "objectID": "project/index.html",
    "href": "project/index.html",
    "title": "Project",
    "section": "",
    "text": "March 15, 2023\n        \n        \n            Holiday Plotly Dash Challenge\n            \n                \n                    Plotly\n                \n                \n                    Dash\n                \n                \n                    Python\n                \n                \n                    Churn\n                \n            \n            \n        \n        \n            \n        \n    \n\n\nNo matching items"
  },
  {
    "objectID": "project/index.html#section",
    "href": "project/index.html#section",
    "title": "Project",
    "section": "",
    "text": "March 15, 2023\n        \n        \n            Holiday Plotly Dash Challenge\n            \n                \n                    Plotly\n                \n                \n                    Dash\n                \n                \n                    Python\n                \n                \n                    Churn\n                \n            \n            \n        \n        \n            \n        \n    \n\n\nNo matching items"
  },
  {
    "objectID": "project/index.html#section-1",
    "href": "project/index.html#section-1",
    "title": "Project",
    "section": "2022",
    "text": "2022\n\n\n    \n                  \n            January 10, 2022\n        \n        \n            Political and Conflict Event in Ghana\n            \n                \n                    ACLED\n                \n                \n                    Conflict\n                \n                \n                    Minor Ethicity\n                \n                \n                    Ghana\n                \n                \n                    Python\n                \n            \n            \n        \n        \n            \n        \n    \n\n\nNo matching items"
  },
  {
    "objectID": "project/2023/01/15/Plotly_Dash/index.html",
    "href": "project/2023/01/15/Plotly_Dash/index.html",
    "title": "Holiday Plotly Dash Challenge",
    "section": "",
    "text": "Dash app developed for the Dash Autumn Challenge 2022. Customer Churn data was used. It analyzes customer churn behavior and uses a classification model to predict which customers are at risk of churn. By understanding and addressing the root causes of churn, we can work to retain valuable customers and improve the company‚Äôs revenue and profitability. Our analysis has identified two main profiles:\n\nA high-risk profile for churn is a customer on a month-to-month contract, using Fiber Optic service, with electronic check as their payment method, and who does not subscribe to online services and technical support services.\nA low risk profile for churn is a customer on a two-year contract, using DSL as their Internet service, and who subscribes to online services or technical support.\n\n\nTHE CONTEST\n\n\nMY APP SOLUTION\n\n\nAPP WON FIRST PLACE"
  },
  {
    "objectID": "project/2023/03/15/Plotly_Dash/index.html",
    "href": "project/2023/03/15/Plotly_Dash/index.html",
    "title": "Holiday Plotly Dash Challenge",
    "section": "",
    "text": "The Dash app won first place ü•á. It was developed for the Dash Holiday Challenge 2022. Customer Churn data was used. It analyzes customer churn behavior and uses a classification model to predict which customers are at risk of churn. By understanding and addressing the root causes of churn, we can work to retain valuable customers and improve the company‚Äôs revenue and profitability. Our analysis has identified two main profiles:\n\nA high-risk profile for churn is a customer on a month-to-month contract, using Fiber Optic service, with electronic check as their payment method, and who does not subscribe to online services and technical support services.\nA low risk profile for churn is a customer on a two-year contract, using DSL as their Internet service, and who subscribes to online services or technical support.\n\n\nThe Challenge contest\nBuild an impressive customer segmentation data app using the provided IBM customer churn dataset . The app should provide insights on the relationship between churn and customers‚Äô characteristics, have a well-designed interface, and utilize data exploration and analysis techniques such as numerical methods, machine learning, prediction, classification, and optimization. Submit the app code and a link to the deployed app by midnight on Saturday, January 14 for a chance to win the Plotly Community Challenge.\nRead more on Plotly Community\n\n\nMy app solution\nThe App was designed in seven sections, as follows:\n\nWelcome : Welcome page.\n\n\n\nCustomers : Display customer information\n\n\n\nInsights : Give an overview of customers behavior.\n\n\n\nExploratory: Show relationship between churn and monthly charges within customer caracteristiques.\n\n\n\nClassification: This section provides model building and Churn prediction\n\n\n\nSummary: Give a summary of the app.\n\n\n\nAbout: Who am I?.\n\n\n\n\nApp won first place\n\nRead more on Plotly Medium.\n\nView project website\nhttps://live-abdelanlah-plotlydash-churn.onrender.com/\n\n\n\n\n\n\nNote\n\n\n\nVery slow. We recommend to run the app locally by creating a virtual environment with the provided requirements.txt. Then just run app.py, open your browser and go to http://127.0.0.1:8050/.\n\n\n\n\n\n\n\n\nYou need to have git and python installed\n\n\n\ngit clone https://github.com/AbdelTID/Holiday-Plotly-Dash-Challenge.git\ncd \"Holiday-Plotly-Dash-Challenge\"\npip install -r requirements.txt\npython3 app.py\n\n\n\n\nView project repo\nhttps://github.com/AbdelTID/Holiday-Plotly-Dash-Challenge"
  },
  {
    "objectID": "docs/talks/index.html",
    "href": "docs/talks/index.html",
    "title": "Talks that Last",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "docs/talks/index.html#section",
    "href": "docs/talks/index.html#section",
    "title": "Talks that Last",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "docs/talks/index.html#section-1",
    "href": "docs/talks/index.html#section-1",
    "title": "Talks that Last",
    "section": "2022",
    "text": "2022\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "docs/talks/index.html#section-2",
    "href": "docs/talks/index.html#section-2",
    "title": "Talks that Last",
    "section": "2021",
    "text": "2021\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "talks/index.html#section-1",
    "href": "talks/index.html#section-1",
    "title": "Talks that Last",
    "section": "2022",
    "text": "2022\n\n\n    \n        \n            \n        \n        \n            \n                Political Economy T.A session \n            \n            \n                October 31, 2022 ‚àô \n                African School of Economics, Abomey-Calavi\n            \n            I Provided training and guidance in Python and R for data analysis and visualization of Political and Conflict Events using ACLED data.\n            \n                \n                    \n                         Slides\n                    \n                \n            \n        \n    \n\n\nNo matching items"
  },
  {
    "objectID": "research/index.html#working-papers",
    "href": "research/index.html#working-papers",
    "title": "Research ",
    "section": "WORKING PAPERS",
    "text": "WORKING PAPERS\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "research/index.html#work-in-progress",
    "href": "research/index.html#work-in-progress",
    "title": "Research ",
    "section": "WORK IN PROGRESS",
    "text": "WORK IN PROGRESS\n\n\n        \n            \n                \n                        National Identity, Altruism, and Agreement with COVID-19 Containment Policy in Benin\n                \n                \n                \n                \n                    \n                        National Identity\n                    \n                    \n                        Altruism\n                    \n                    \n                        COVID-19\n                    \n                \n                \n                    with Ian Heffernan and Mohamed Nana\n                \n                \n                \n            \n        \n\n\nNo matching items"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#instruction",
    "href": "talks/talks_2022/TA/index.html#instruction",
    "title": "Political Economy T.A session",
    "section": "Instruction",
    "text": "Instruction\n\nThese are just a few statistics you can use, but you‚Äôre not allowed to be limited to that.\nUse your analytical skill\nChoose no more than six statistics you think are relevant and communicate well about conflict in your country\nThose who have already done a good job don‚Äôt need to edit their work too much, just fix your mistake\nChoose either a chart or a table, not both, because it‚Äôs just a replication.\nBoth give us the same information and some time a table communicate well than a chart\nDon‚Äôt forget to comment your chart or table.\nWrite a summary of your finding at the end of your work"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#packages-and-notebook-config",
    "href": "talks/talks_2022/TA/index.html#packages-and-notebook-config",
    "title": "Political Economy T.A session",
    "section": "Packages and notebook config",
    "text": "Packages and notebook config\n\nPythonR\n\n\n\n#library\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Number of rows and columns to display\npd.set_option('display.max_rows', 150)\npd.set_option('display.max_columns', 150)\npd.set_option('display.float_format', lambda x: '%.2f' % x)\n\n\n\n\nlibrary('tidyverse')\nlibrary('anytime')\nlibrary('plotly')\nlibrary('pander')\nlibrary('haven')\nlibrary('lubridate')\nlibrary('hrbrthemes')\n\n# ggplot2::theme_set(ggplot2::theme_minimal())\n# knitr::opts_chunk$set(\n#   collapse = TRUE,\n#   comment = \"#&gt;\",\n#   fig.align = 'center',\n#   dpi = \"retina\"\n# )"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#load-data",
    "href": "talks/talks_2022/TA/index.html#load-data",
    "title": "Political Economy T.A session",
    "section": "Load data",
    "text": "Load data\nFunction to load the data\n\nPythonR\n\n\n\n#  function to load the data and label some features before analysis \ndef wrangle(file):\n    \n    # Load data\n    dataset_name = file\n    try:\n        df = pd.read_csv(dataset_name,parse_dates=['event_date'])\n    except:\n        df = pd.read_csv(dataset_name, sep=';',parse_dates=['event_date'])\n        \n    # Transform variable\n\n    key = [10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,30,33,34,35,\n           36,37,38,40,44,45,46,47,48,50,55,56,57,58,60,66,67,68,78,80,88]\n\n    value = ['sole military action', 'military versus military', 'military versus rebels',\n     'military versus political militia','military versus communal militia','military versus rioters',\n     'military versus protesters', 'military versus civilians','military versus other','sole rebel action',\n     'rebels versus rebels', 'rebels versus political miliita','rebels versus communal militia',\n     'rebels versus rioters', 'rebels versus protesters', 'rebels versus civilians',\n     'rebels versus others', 'sole political militia action', 'political militia versus political militia',\n     'political militia versus communal militia', 'political militia versus rioters',\n     'political militia versus protesters','political militia versus civilians',\n     'political militia versus others', 'sole communal militia action',\n     'communal militia versus communal militia', 'communal militia versus rioters',\n     'communal militia versus protesters','communal militia versus civilians',\n     'communal militia versus other', 'sole rioter action', 'rioters versus rioters',\n     'rioters versus protesters', 'rioters versus civilians', 'rioters versus others',\n     'sole protester action', 'protesters versus protesters','protesters versus civilians',\n     'protesters versus other', 'other actor versus civilians','sole other action',\n     'other force versus  other force']\n\n    actor_type= ['no victicme', 'state forces', 'rebel groups', 'political militias',\n     'communal militias','rioters', 'protesters', 'civilians', 'other forces']\n\n    actor_key=range(0,9)\n\n    # inter1\n    df[\"inter1\"]=df[\"inter1\"].replace(actor_key,actor_type)\n\n    # interaction    \n    df[\"interaction\"]=df[\"interaction\"].replace(key,value)\n\n    # convert event_date to datetime dtype \n    # df['event_date']=pd.to_datetime(df[\"event_date\"], format=\"%d %B %Y\")\n\n    return df\n\n#  axis formatting\naxis_font = dict(\n    showline=True,showgrid=False,\n    showticklabels=True,\n    linecolor='rgb(204, 204, 204)',\n    linewidth=2,ticks='outside',\n    tickfont=dict(family='San-Serif',\n        size=12, color='black', ))\n\ncolors=sns.color_palette('Set3')\n\n\n\n\n#  function to load the data and label some features before analysis \n\nwrangle &lt;- function(file){\n  \n  # Load data\n  df &lt;- read.csv(file)\n  if (ncol(df)&lt;2){df &lt;-read.csv(file,sep = ';')}\n\n\n  # Transform variable\n  key &lt;- c(10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,30,33,34,35,\n           36,37,38,40,44,45,46,47,48,50,55,56,57,58,60,66,67,68,78,80,88)\n\n  value &lt;-c('sole military action', 'military versus military'\n           , 'military versus rebels', 'military versus political militia'\n           ,'military versus communal militia', 'military versus rioters'\n           ,'military versus protesters', 'military versus civilians'\n           ,'military versus other', 'sole rebel action'\n           , 'rebels versus rebels', 'rebels versus political miliita'\n           ,'rebels versus communal militia', 'rebels versus rioters'\n           , 'rebels versus protesters', 'rebels versus civilians'\n           ,'rebels versus others', 'sole political militia action'\n           , 'political militia versus political militia'\n           ,'political militia versus communal militia'\n           , 'political militia versus rioters'\n           , 'political militia versus protesters'\n           ,'political militia versus civilians'\n           , 'political militia versus others'\n           , 'sole communal militia action'\n           ,'communal militia versus communal militia'\n           , 'communal militia versus rioters'\n           , 'communal militia versus protesters'\n           ,'communal militia versus civilians'\n           , 'communal militia versus other', 'sole rioter action'\n           , 'rioters versus rioters','rioters versus protesters'\n           , 'rioters versus civilians', 'rioters versus others'\n           , 'sole protester action', 'protesters versus protesters'\n           ,'protesters versus civilians', 'protesters versus other'\n           , 'other actor versus civilians', 'sole other action'\n           ,'other force versus  other force')\n\n  actor_type&lt;-c('no victicme', 'state forces', 'rebel groups'\n                 , 'political militias', 'communal militias'\n             ,'rioters', 'protesters', 'civilians', 'other forces')\n  actor_key&lt;-0:8\n\n  # inter1\n  df$inter1 &lt;- factor(df$inter1,levels = actor_key,labels = actor_type)\n\n  # interaction  \n  df$interaction &lt;- factor(df$interaction, levels = key,labels = value)\n  \n  # convert event_date to datetime  \n  df$event_date &lt;- as.Date(df$event_date,format=\"%d-%b-%y\")\n  \n  return(df)\n}"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#load-data-1",
    "href": "talks/talks_2022/TA/index.html#load-data-1",
    "title": "Political Economy T.A session",
    "section": "Load data",
    "text": "Load data\n\nPythonR\n\n\n\n# Load data\ndf = wrangle('./data/Ethiopia_1997-2022_Sep23.csv')\n\n## Columns name\n# print(df.columns)\n\n# get some imformation about the data\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 8906 entries, 0 to 8905\nData columns (total 29 columns):\n #   Column            Non-Null Count  Dtype         \n---  ------            --------------  -----         \n 0   iso               8906 non-null   int64         \n 1   event_id_cnty     8906 non-null   object        \n 2   event_id_no_cnty  8906 non-null   int64         \n 3   event_date        8906 non-null   datetime64[ns]\n 4   year              8906 non-null   int64         \n 5   time_precision    8906 non-null   int64         \n 6   event_type        8906 non-null   object        \n 7   sub_event_type    8906 non-null   object        \n 8   actor1            8906 non-null   object        \n 9   assoc_actor_1     2866 non-null   object        \n 10  inter1            8906 non-null   object        \n 11  actor2            7139 non-null   object        \n 12  assoc_actor_2     2552 non-null   object        \n 13  inter2            8906 non-null   int64         \n 14  interaction       8906 non-null   object        \n 15  region            8906 non-null   object        \n 16  country           8906 non-null   object        \n 17  admin1            8906 non-null   object        \n 18  admin2            8906 non-null   object        \n 19  admin3            8906 non-null   object        \n 20  location          8906 non-null   object        \n 21  latitude          8906 non-null   float64       \n 22  longitude         8906 non-null   float64       \n 23  geo_precision     8906 non-null   int64         \n 24  source            8906 non-null   object        \n 25  source_scale      8906 non-null   object        \n 26  notes             8874 non-null   object        \n 27  fatalities        8906 non-null   int64         \n 28  timestamp         8906 non-null   int64         \ndtypes: datetime64[ns](1), float64(2), int64(8), object(18)\nmemory usage: 2.0+ MB\n\n\n\n\n\n# Load data\ndf&lt;- wrangle('./data/Ethiopia_1997-2022_Sep23.csv')\n\n## Columns name\n# names(df)\n\n# glimpse : get some imformation about the data\ndf%&gt;%glimpse()\n\nRows: 8,906\nColumns: 29\n$ iso              &lt;int&gt; 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231‚Ä¶\n$ event_id_cnty    &lt;chr&gt; \"ETH1\", \"ETH2\", \"ETH3\", \"ETH4\", \"ETH5\", \"ETH7\", \"ETH6‚Ä¶\n$ event_id_no_cnty &lt;int&gt; 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 13, 12, 14, 15, 16‚Ä¶\n$ event_date       &lt;date&gt; 1997-01-15, 1997-02-10, 1997-02-15, 1997-03-21, 1997‚Ä¶\n$ year             &lt;int&gt; 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,‚Ä¶\n$ time_precision   &lt;int&gt; 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1,‚Ä¶\n$ event_type       &lt;chr&gt; \"Strategic developments\", \"Explosions/Remote violence‚Ä¶\n$ sub_event_type   &lt;chr&gt; \"Change to group/activity\", \"Grenade\", \"Headquarters ‚Ä¶\n$ actor1           &lt;chr&gt; \"SPLM/A: Sudan People's Liberation Movement/Army\", \"U‚Ä¶\n$ assoc_actor_1    &lt;chr&gt; \"\", \"\", \"\", \"Students (Ethiopia)\", \"\", \"\", \"\", \"\", \"\"‚Ä¶\n$ inter1           &lt;fct&gt; rebel groups, political militias, rebel groups, prote‚Ä¶\n$ actor2           &lt;chr&gt; \"\", \"Civilians (Ethiopia)\", \"\", \"Police Forces of Eth‚Ä¶\n$ assoc_actor_2    &lt;chr&gt; \"\", \"Civilians (International)\", \"\", \"\", \"\", \"Civilia‚Ä¶\n$ inter2           &lt;int&gt; 0, 7, 0, 1, 0, 7, 7, 7, 7, 7, 7, 7, 2, 4, 7, 4, 2, 7,‚Ä¶\n$ interaction      &lt;fct&gt; sole rebel action, political militia versus civilians‚Ä¶\n$ region           &lt;chr&gt; \"Eastern Africa\", \"Eastern Africa\", \"Eastern Africa\",‚Ä¶\n$ country          &lt;chr&gt; \"Ethiopia\", \"Ethiopia\", \"Ethiopia\", \"Ethiopia\", \"Ethi‚Ä¶\n$ admin1           &lt;chr&gt; \"Gambela\", \"Harari\", \"Gambela\", \"Addis Ababa\", \"Addis‚Ä¶\n$ admin2           &lt;chr&gt; \"Agnewak\", \"Harari\", \"Agnewak\", \"Region 14\", \"Region ‚Ä¶\n$ admin3           &lt;chr&gt; \"Gambela town\", \"Abadir\", \"Gambela town\", \"Lideta\", \"‚Ä¶\n$ location         &lt;chr&gt; \"Gambella\", \"Harar\", \"Gambella\", \"Addis Ababa\", \"Addi‚Ä¶\n$ latitude         &lt;dbl&gt; 8.250, 9.312, 8.250, 9.025, 9.025, 9.025, 9.025, 9.02‚Ä¶\n$ longitude        &lt;dbl&gt; 34.588, 42.124, 34.588, 38.747, 38.747, 38.747, 38.74‚Ä¶\n$ geo_precision    &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1,‚Ä¶\n$ source           &lt;chr&gt; \"Guardian (United Kingdom)\", \"Reuters\", \"All Africa\",‚Ä¶\n$ source_scale     &lt;chr&gt; \"International\", \"International\", \"Regional\", \"Region‚Ä¶\n$ notes            &lt;chr&gt; \"Movement of forces: SPLA allowed to set up bases and‚Ä¶\n$ fatalities       &lt;int&gt; 0, 2, 0, 0, 0, 0, 1, 0, 0, 1, 0, 16, 0, 24, 3, 24, 2,‚Ä¶\n$ timestamp        &lt;int&gt; 1659390003, 1618529747, 1659390003, 1618529973, 16185‚Ä¶"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#map-of-conflict",
    "href": "talks/talks_2022/TA/index.html#map-of-conflict",
    "title": "Political Economy T.A session",
    "section": "Map of conflict",
    "text": "Map of conflict\n\nPythonR\n\n\n\n## Plot Mapbox location and event type\nfig = px.scatter_mapbox(\n    df[df['event_date']&gt;'2013-12-31'], # Our DataFrame\n    lat=\"latitude\",\n    lon=\"longitude\",    \n    # width=1000, # Width of map\n    height=700, # Height of map\n    title=f\"&lt;b&gt;Political violence & protest events in {df['country'].unique()[0]}&lt;b&gt;\",\n    labels={'event_type':'&lt;b&gt;Event Type'} ,\n    # size=\"fatalities\",\n    size_max=20,\n    zoom=3.8,\n    center={'lon':39,'lat':9},\n    color=\"event_type\",\n    # Display notes when hovering mouse over event\n    hover_data=['interaction', 'year', 'fatalities', 'location'], \n)\nfig.update_layout(\n    mapbox_style=\"open-street-map\",\n                  title_x=0.5,\n                 )\n\n\n                        \n                                            \n\n\n\n\n\n## Plot Mapbox location and event type\nfig &lt;-df %&gt;% \n  plot_ly(\n    lat = ~latitude,\n    lon = ~longitude,\n    color=~event_type,\n    # marker = list(color = \"fuchsia\"),\n    type = 'scattermapbox',\n    hovertext = ~paste(interaction, year, fatalities, location, sep = \"&lt;br /&gt;\")\n    \n  )\nfig &lt;- fig %&gt;%\n  layout(\n    title = paste(\"&lt;b&gt;Political violence & protest events in\"\n                  ,df$country[1]\n                  ,\"&lt;b&gt;\"),\n    mapbox = list(\n      style = 'open-street-map',\n      zoom =3.8\n      ,center = list(lon = 39, lat =9)\n      )) \n\nfig"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#event-type-and-sub-event-type",
    "href": "talks/talks_2022/TA/index.html#event-type-and-sub-event-type",
    "title": "Political Economy T.A session",
    "section": "Event type and Sub event type",
    "text": "Event type and Sub event type\n\nPythonR\n\n\n\n\n#event_type percent\nevent_type=df[\"event_type\"].value_counts(\n                normalize=True)\n\ntitle=\"&lt;b&gt;Event Type percentage\"\n\n# Pie chart\nfig = go.Figure(data=[go.Pie(\n    labels=event_type.index, \n    values=event_type, \n    # textinfo = 'label+percent',\n    textposition = 'inside',\n    insidetextfont={'color':'white'},\n    pull=[0.1, 0, 0.2,0, 0,0])])\nfig.update_layout(\n  title_text=title+\" since 1997 Ethiopia&lt;b&gt;\",\n  titlefont={'size': 14, 'family':'Serif'},\n  title_x=0.5, margin={\"l\":0,'r':0}\n  # width=600,height=400,\n)\n\n\n\n                        \n                                            \n\n\n\n\n\n\n\n#event_type percent\nevent_type &lt;-df %&gt;%\n    group_by(event_type) %&gt;%\n    count() %&gt;% \n    ungroup() %&gt;% \n    mutate(perc = n / sum(n)) %&gt;% \n    arrange(desc(perc)) %&gt;%\n    mutate(labels = scales::percent(perc))\n\n# Pie hart\nfig &lt;- plot_ly(df, labels = ~event_type,\n    type = 'pie',height=500,width=500,\n    textposition = 'inside',\n    insidetextfont = list(color = '#FFFFFF'),\n    marker = list(line = list(\n    color = '#FFFFFF', width = 1)),pull=0.03\n  ) %&gt;% layout(title= list(\n  text=\"Event Type percentage since 1997 in Ethiopia\",\n  font= list(family = \"Times New Roman\",\n  color = \"black\",size=15))\n  )\nfig"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#event-type-and-sub-event-type-1",
    "href": "talks/talks_2022/TA/index.html#event-type-and-sub-event-type-1",
    "title": "Political Economy T.A session",
    "section": "Event type and Sub event type",
    "text": "Event type and Sub event type\n\n\n# event and sub_event \n\nsub_event=df.groupby([\"event_type\",\"sub_event_type\"]\n        )[\"event_date\"].agg({'count'}).reset_index()\n\n# Event type and Sub event type visualisation \n\nfig = px.sunburst(sub_event, \n          path=['event_type', 'sub_event_type'], \n          values='count',\n          # width=600, # Width of map\n        # height=600,\n        )\nfig.update_traces(textinfo=\"label+percent parent\")"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#actor-type",
    "href": "talks/talks_2022/TA/index.html#actor-type",
    "title": "Political Economy T.A session",
    "section": "Actor type",
    "text": "Actor type\n\nPythonR\n\n\n\n\nfig = px.bar(df['inter1'].value_counts()\n            .sort_values(ascending=True),\n            orientation='h',\n            # height=400,width=800\n            )\nfig.update_layout(\n    xaxis=axis_font,\n    yaxis=axis_font,\n    title_text=\"&lt;b&gt; Number of conflicts events \"+\n           \"by Actor Type in Ethiopia (ACLED)&lt;b&gt;\",\n    titlefont={'color':'black', 'size': 16,\n               'family': 'San-Serif'},\n    title_x=0.5,yaxis_title=None, xaxis_title=None,\n    showlegend=False,\n    plot_bgcolor='white', \n    margin={\"l\":0,'r':0}\n)\n\n\n\n                        \n                                            \n\n\n\n\n\n\n\nactor_type&lt;-df %&gt;%\n    group_by(inter1) %&gt;%\n    count() %&gt;% \n    arrange(desc(n))\n\np&lt;- actor_type %&gt;% \n  ggplot(aes(x = reorder(inter1,n), y = n)) +\n  geom_bar(stat = \"identity\",fill=\"royalblue\") +\n  coord_flip() +\n  labs(x = NULL, y = NULL)+\n  theme_minimal()+\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank())\n\n# With plotly\n# ggplotly(p)\n\np\n\n\n\n\nNumber of conflicts events by Actor Type in Ethiopia (ACLED)"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#event-trend",
    "href": "talks/talks_2022/TA/index.html#event-trend",
    "title": "Political Economy T.A session",
    "section": "Event Trend",
    "text": "Event Trend\n\nPythonR\n\n\n\n\n# number of event per month\nnumber_ev=df[\"event_type\"].groupby(\n  [df['event_date'].dt.year.rename('year'), \n  df['event_date'].dt.month.rename('month')]\n  ).agg({'count'})\nnumber_ev.index = [pd.datetime(year, month,1)\n          for (year,month) in number_ev.index]\n\nfig = px.line(number_ev)\n\nfig.update_layout(\n    yaxis=axis_font,xaxis=axis_font,\n    title_text=\"&lt;b&gt; Conflict events trend \"+\n        f\"in {df['country'].unique()[0]} (ACLED)&lt;b&gt;\",\n    titlefont={'color':'black', 'size': 16,\n     'family': 'San-Serif'},\n    title_x=0.5,yaxis_title=None, xaxis_title=None,\n    showlegend=False, plot_bgcolor='white', \n    font=dict(color ='black',),\n    margin={\"l\":0,'r':0}\n)\n\n\n\n                        \n                                            \n\n\n\n\n\n\n\n# number of event per month\nevent &lt;- df %&gt;% \n  mutate(year = year(event_date)\n         , month = month(event_date,\n          abbr = FALSE, label = TRUE)) %&gt;% \n  group_by(year, month) %&gt;% \n  summarise(count = n()) %&gt;% \n  mutate(date  = as.Date(paste(year,month,1)\n                    ,format=\"%Y %B %d\"))\n\np &lt;- event %&gt;%\n  ggplot( aes(x=date, y=count)) +\n    geom_line(color=\"royalblue\",size=1) +\n    labs( x = NULL ,y = NULL) +\n    scale_x_date(date_breaks = \"5 year\",\n                 date_labels = \"%Y\")+\n    theme_minimal()+\n    theme(panel.grid.minor = element_blank())\np\n\n\n\n\nConflict events trend in Ethiopia (ACLED)"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#fatalities-trend",
    "href": "talks/talks_2022/TA/index.html#fatalities-trend",
    "title": "Political Economy T.A session",
    "section": "Fatalities Trend",
    "text": "Fatalities Trend\n\nPythonR\n\n\n\n\nnumber_fatalities = df[\"fatalities\"].groupby(\n  [df['event_date'].dt.year.rename('year'), \n   df['event_date'].dt.month.rename('month')]\n   ).agg({'sum'})\nnumber_fatalities.index = [pd.datetime(year, month,1)\n       for (year,month) in number_fatalities.index]\n\nfig = px.line(number_fatalities)\nfig.update_traces(line=dict(color='red')\n  ).update_layout(\n    xaxis=axis_font, yaxis=axis_font,\n    title_text=f\"&lt;b&gt; Conflict fatalities trend \"+\n    f\"in {df['country'].unique()[0]} (ACLED)&lt;b&gt;\",\n    titlefont={'color':'black', 'size': 16,\n     'family': 'San-Serif'},\n    title_x=0.5,yaxis_title=None, xaxis_title=None,\n    showlegend=False, plot_bgcolor='white', \n    margin={\"l\":0,'r':0}\n)\n\n\n\n                        \n                                            \n\n\n\n\n\n\n\nfatality &lt;- df %&gt;% \n  mutate(year = year(event_date), \n         month = month(event_date,\n         abbr = FALSE, label = TRUE)) %&gt;% \n  group_by(year, month) %&gt;% \n  summarise(fat = sum(fatalities)) %&gt;% \n  mutate(date  = as.Date(paste(year,month,1)\n                   ,format=\"%Y %B %d\"))\np &lt;- fatality%&gt;%\n  ggplot( aes(x=date, y=fat)) +\n    geom_line(color=\"red\",size=1) +\n    labs( x = NULL ,y = NULL) +\n    scale_x_date(date_breaks = \"5 year\",\n                 date_labels = \"%Y\")+\n    theme_minimal()\np\n\n\n\n\nConflict fatalities trend in Ethiopia (ACLED)"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#conflict-year",
    "href": "talks/talks_2022/TA/index.html#conflict-year",
    "title": "Political Economy T.A session",
    "section": "Conflict-Year",
    "text": "Conflict-Year\n\nPythonR\n\n\n\n\ndf1 = (df[df['event_date']&gt;'2014-12-31']\n .groupby(['year','event_type'])\n .agg({\"event_date\": 'count'})\n  .rename(columns= {'event_date':'Count'})\n .reset_index()\n)\ndf1['year'] = df1['year'].astype(str)\n\nfig = px.bar(df1, x = 'year',color='event_type',\n      y='Count', # height=400,width=800,\n)\nfig.update_layout(\n    xaxis=axis_font,xaxis_title=None,\n    yaxis=axis_font,yaxis_title=None,\n    title_text=f\"&lt;b&gt;Events in Ethiopia (ACLED)&lt;b&gt;\",\n    titlefont={'color':'black',\n     'size': 16, 'family': 'San-Serif'},\n    title_x=0.5,showlegend=True,\n    legend={\"font\":{'size':8},'title':None},\n    margin={\"l\":0,'r':0},\n    plot_bgcolor='white', \n    font=dict(color ='black',)\n)\n\n\n\n                        \n                                            \n\n\n\n\n\n\n\ndf2 &lt;- df %&gt;% \n  group_by(year, event_type) %&gt;% \n  summarise(n = n()) \n\n\ndf2 %&gt;% filter(year&gt;2014) %&gt;% \n  ggplot(aes(x =factor( year), y = n)) +\n  geom_bar(stat = \"identity\",\n   aes(fill = event_type)) +\n  labs(x = NULL, y = NULL,fill = NULL)+\n  theme_minimal()+\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank())\n\n\n\n\nEvents in Ethiopia (ACLED)"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#fatalities-year",
    "href": "talks/talks_2022/TA/index.html#fatalities-year",
    "title": "Political Economy T.A session",
    "section": "Fatalities-Year",
    "text": "Fatalities-Year\n\nPythonR\n\n\n\n\ndf2 = (df[df['event_date']&gt;'2014-12-31']\n .groupby(['year','event_type'])\n .agg({\"fatalities\": 'sum'})\n  # .rename(columns= {'fatalities':'sum'})/\n .reset_index()\n)\ndf2['year'] = df1['year'].astype(str)\nfig = px.bar(df2, x = 'year',color='event_type', \n    y='fatalities', # height=400,width=800,\n)\n\nfig.update_layout(\n  xaxis=axis_font,xaxis_title=None,\n  yaxis=axis_font,yaxis_title=None,\n  title_text=\"&lt;b&gt;Fatalities in Ethiopia (ACLED)&lt;b&gt;\",\n  titlefont={'color':'black',\n    'size': 16, 'family': 'San-Serif'},\n  title_x=0.5,showlegend=True,\n  legend={\"font\":{'size':8},'title':None},\n  margin={\"l\":0,'r':0},\n  plot_bgcolor='white', \n  font=dict(color ='black',)\n)\n\n\n\n                        \n                                            \n\n\n\n\n\n\n\ndf3 &lt;- df %&gt;% \n  group_by(year, event_type) %&gt;% \n  summarise(fat = sum(fatalities)) \n\n\ndf3 %&gt;% filter(year&gt;2014) %&gt;% \n  ggplot(aes(x =factor( year), y = fat)) +\n  geom_bar(stat = \"identity\",\n   aes(fill = event_type)) +\n  labs(x = NULL, y = NULL,fill = NULL)+\n  theme_minimal()+\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank())\n\n\n\n\nFatalities in Ethiopia (ACLED)"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#interaction",
    "href": "talks/talks_2022/TA/index.html#interaction",
    "title": "Political Economy T.A session",
    "section": "Interaction",
    "text": "Interaction\n\nPythonR\n\n\n\n\nfig = px.bar(\n  df['interaction'].value_counts().head(10),\n    orientation='h',# height=400,width=800,\n)\nfig.update_layout(\n  xaxis=axis_font,xaxis_title=None,\n  yaxis=axis_font,yaxis_title=None,\n  title_text=(\"&lt;b&gt; Most frequent Interaction\"+\n   \" in Ethiopia conflicts (ACLED)&lt;b&gt;\"),\n  titlefont={'color':'black',\n    'size': 16, 'family': 'San-Serif'},\n  title_x=0.5,showlegend=False,\n  legend_title=None, margin={\"l\":0,'r':0},\n  plot_bgcolor='white', \n  font=dict(color ='black',)\n)\n\n\n\n                        \n                                            \n\n\n\n\n\n\n\ndf5&lt;-df %&gt;%\n    group_by(interaction) %&gt;%\n    count() %&gt;% \n    arrange(desc(n))\n\ndf5 %&gt;% head(10)%&gt;% \n  ggplot(aes(x = reorder(interaction,n),y=n)) +\n  geom_bar(stat = \"identity\",fill=\"royalblue\") +\n  coord_flip() +\n  labs(x = NULL, y = NULL)+\n  theme_minimal()+\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank())\n\n\n\n\nMost frequent Interaction in Ethiopia conflicts (ACLED)"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#actor-name-involved",
    "href": "talks/talks_2022/TA/index.html#actor-name-involved",
    "title": "Political Economy T.A session",
    "section": "Actor name involved",
    "text": "Actor name involved\n\nPythonR\n\n\n\n\nfig = px.bar(\n  df['actor1'].value_counts().head(10),\n  orientation='h',# height=400,width=800,\n)\nfig.update_layout(\n  xaxis=axis_font,xaxis_title=None,\n  yaxis=axis_font,yaxis_title=None,\n  title_text=(\"&lt;b&gt; Most Actor involved\"+\n   \" in Ethiopia conflicts (ACLED)&lt;b&gt;\"),\n  titlefont={'color':'black',\n    'size': 16, 'family': 'San-Serif'},\n  title_x=0.5,showlegend=False,\n  legend_title=None, margin={\"l\":0,'r':0},\n  plot_bgcolor='white', \n  font=dict(color ='black',)\n)\n\n\n\n                        \n                                            \n\n\n\n\n\n\n\ndf6&lt;-df %&gt;%\n    group_by(actor1) %&gt;%\n    count() %&gt;% \n    arrange(desc(n))\n\ndf6 %&gt;% head(10)%&gt;% \n  ggplot(aes(x = reorder(actor1, n), y = n)) +\n  geom_bar(stat = \"identity\",fill=\"royalblue\") +\n  coord_flip() +\n  labs(x = NULL, y = NULL)+\n  theme_minimal()+\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        axis.text.y = element_text(size=9))\n\n\n\n\nMost Actor involved in Ethiopia conflicts (ACLED"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#let-modify-the-last-plot",
    "href": "talks/talks_2022/TA/index.html#let-modify-the-last-plot",
    "title": "Political Economy T.A session",
    "section": "Let modify the last plot",
    "text": "Let modify the last plot\n\nPythonR\n\n\n\n\n# ? we change the theme to dark\nfig = px.bar(\n  df['actor1'].value_counts().head(10),\n     orientation='h',# height=400,width=800,\n)\nfig.update_layout(\n  xaxis_title=None,yaxis_title=None,\n  title_text=(\"&lt;b&gt; Most Actor involved\"+\n   \" in Ethiopia conflicts (ACLED)&lt;b&gt;\"),\n  titlefont={'color':'red',\n    'size': 16, 'family': 'San-Serif'},\n  title_x=0.5,showlegend=False,\n  legend_title=None, margin={\"l\":0,'r':0},\n  template=\"plotly_dark\",\n)\n\n\n\n                        \n                                            \n\n\n\n\n\n\n\ndf6 %&gt;% head(10)%&gt;% \n  ggplot(aes(x = reorder(actor1, n), y = n)) +\n  geom_bar(stat = \"identity\",fill=\"royalblue\") +\n  coord_flip() +\n  labs(x =NULL, y = NULL)+\n  theme_ft_rc()+\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        axis.text.y = element_text(size=9))\n\n\n\n\nMost Actor involved in Ethiopia conflicts (ACLED)"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#let-modify-the-last-plot-1",
    "href": "talks/talks_2022/TA/index.html#let-modify-the-last-plot-1",
    "title": "Political Economy T.A session",
    "section": "Let modify the last plot",
    "text": "Let modify the last plot\n\nPythonR\n\n\n\n\ndf5 = df['actor1'].value_counts()\\\n    .rename('count').reset_index().head(10)\nsns.set(rc={'axes.facecolor':'#FFFFFF', \n    'figure.facecolor':'#FFFFFF',\n    'font.sans-serif':'Arial',\n    'font.family':'sans-serif'\n})\nfig,ax = plt.subplots(figsize=(10,6))\n\nax = sns.barplot(y=\"index\", x= \"count\",data=df5,\n      edgecolor=\"black\",palette=colors, hatch='/')\nfor p in ax.patches:\n    value = f'{p.get_width():g}'\n    x = p.get_x() + p.get_width() + 100\n    y = p.get_y() + p.get_height() / 2 \n    ax.text(x, y, value, ha='left', va='center', \n      bbox=dict(facecolor='none', edgecolor='black',\n                boxstyle='round', linewidth=1))\nax.set(xticklabels=[],ylabel=None, xlabel=None,);\nplt.tight_layout(pad=1, w_pad=1, h_pad=1)\nax\n\n\n\n\nMost Actor involved in Ethiopia conflicts (ACLED)\n\n\n\n\n\n\n\n\n\n\ndf6 %&gt;% head(10)%&gt;% \n  ggplot(aes(x = reorder(actor1, n), y = n)) +\n  geom_bar(stat = \"identity\",aes(fill = actor1),\n   show.legend = FALSE) +\n  coord_flip() +\n  labs(x = NULL, y = NULL)+\n  geom_label(aes(label = formatC(n, format=\"f\"\n    ,big.mark=\",\", digits=0)), size = 2.2) +\n  theme_minimal()+\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        axis.text.y = element_text(size=9))\n\n\n\n\nMost Actor involved in Ethiopia conflicts (ACLED)"
  },
  {
    "objectID": "talks/talks_2022/TA/index.html#wordcloud-1",
    "href": "talks/talks_2022/TA/index.html#wordcloud-1",
    "title": "Political Economy T.A session",
    "section": "Wordcloud",
    "text": "Wordcloud\n\nPythonR\n\n\n\n\nfrom os import path\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\nfrom wordcloud import WordCloud, STOPWORDS\n\nl=[]\nfor x in list(df['notes'].values):\n    if str(x) not in l:l.append(str(x))\n\ntext = ' '.join(l)\n\nstopwords = set(STOPWORDS)\nfor i in ['size','no','report','said',\"ongoing\",\n    'arrested','reported','area','several']:\n    stopwords.add(i)\n\nwc = WordCloud(background_color=\"white\",\n  max_words=2000,\n  # mask=None,\n  colormap ='Dark2',\n  stopwords=stopwords,\n  # contour_width=3, contour_color='steelblue'\n)\n\n# generate word cloud\nwc.generate(text.lower());\n\nplt.figure()\n# Show the wordcloud\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\");\nplt.show()\n\n\n\n\n\n\n\n\n\n\n# # Install\n# install.packages(\"tm\")  # for text mining\n# install.packages(\"SnowballC\") # for text stemming\n# install.packages(\"wordcloud\") # word-cloud generator \n# install.packages(\"wordcloud2\")\n\n# install.packages(\"RColorBrewer\") # color palettes\n# Load\nlibrary(\"tm\")\nlibrary(\"SnowballC\")\nlibrary(\"wordcloud\")\nlibrary(\"wordcloud2\")\nlibrary(\"RColorBrewer\")\n\n#Create a vector containing only the text\ntext &lt;- df$notes\n# Create a corpus  \ndocs &lt;- Corpus(VectorSource(text))\n\n# text transformation\ntoSpace &lt;- content_transformer(\n  function (x , pattern ) gsub(pattern, \" \", x))\ndocs &lt;- tm_map(docs, toSpace, \"/\")\ndocs &lt;- tm_map(docs, toSpace, \"@\")\ndocs &lt;- tm_map(docs, toSpace, \"\\\\|\")\n\n\n# Convert the text to lower case\ndocs &lt;- tm_map(docs, content_transformer(tolower))\n# Remove numbers\ndocs &lt;- tm_map(docs, removeNumbers)\n# Remove english common stopwords\ndocs &lt;- tm_map(docs,removeWords,stopwords(\"english\"))\n# Remove your own stop word\n# specify your stopwords as a character vector\ndocs &lt;- tm_map(docs, removeWords,\n c('size','no','report','said',\n'arrested','reported','area','several')) \n# Remove punctuations\ndocs &lt;- tm_map(docs, removePunctuation)\n# Eliminate extra white spaces\ndocs &lt;- tm_map(docs, stripWhitespace)\n\ndtm &lt;- TermDocumentMatrix(docs)\nmatrix &lt;- as.matrix(dtm)\nwords &lt;- sort(rowSums(matrix),decreasing=TRUE)\ndfw &lt;- data.frame(word = names(words),freq=words)\n\nset.seed(1234) # for reproducibility \n\n# wordcloud2(data=dfw, size=1.6, color='Dark2')\n\nwordcloud(words = dfw$word, freq = dfw$freq,\n min.freq = 50, max.words=2000,\n  random.order=FALSE,colors=brewer.pal(8, \"Dark2\"))"
  },
  {
    "objectID": "talks/index.html",
    "href": "talks/index.html",
    "title": "Talks that Last",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "talks/index.html#section",
    "href": "talks/index.html#section",
    "title": "Talks that Last",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "research/index.html",
    "href": "research/index.html",
    "title": "Research ",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "research/index.html#publication",
    "href": "research/index.html#publication",
    "title": "Research ",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "research/nat_alt_pap/index.html#abstract",
    "href": "research/nat_alt_pap/index.html#abstract",
    "title": "National Identity, Altruism, and Agreement with COVID-19 Containment Policy in Benin",
    "section": "Abstract",
    "text": "Abstract"
  },
  {
    "objectID": "research/nat_alt_pap/index.html#important-table-figure",
    "href": "research/nat_alt_pap/index.html#important-table-figure",
    "title": "National Identity, Altruism, and Agreement with COVID-19 Containment Policy in Benin",
    "section": "Important table & figure",
    "text": "Important table & figure"
  },
  {
    "objectID": "project/2022/1/10/index.html",
    "href": "project/2022/1/10/index.html",
    "title": "Political and Conflict Event in Ghana",
    "section": "",
    "text": "Exploratory Data Analysis using using Python‚Äôs Pandas library to understand the data, identify partterns of conflict and making initial observations. Matplotlib and Seaborn libraries for simple visualization. Plotly library for interactive visualisation.\n\n\n\n\nCode\nimport warnings\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport altair as alt\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\n\nfrom Wrangledata import wrangle #Our function\n\n# Number of rows and columns\npd.set_option('display.max_rows', 150)\npd.set_option('display.max_columns', 150)\npd.set_option('display.max_colwidth', 500)\n\n\n\n\n\n\n\nCode\n# Load data\ndataset_name = 'data/1980-11-04-2021-11-13-Ghana.csv'\ndf = wrangle(dataset_name)\n\n\n\n\nThe data frame contains 18 attributes, and 1,276 observations.\n\n\nCode\nprint(\"Shape of the data:\", df.shape)\n\n\nShape of the data: (1276, 18)\n\n\nCode\nRows,Cols=df.shape\n\n# Data columns\ncolumns = df.columns\nprint(\"Data columns :\\n\",columns)\n\n# show first 5 columns and rows\n\n\nData columns :\n Index(['event_date', 'year', 'event_type', 'sub_event_type', 'actor1',\n       'inter1', 'actor2', 'inter2', 'interaction', 'admin1', 'admin2',\n       'location', 'latitude', 'longitude', 'source', 'source_scale', 'notes',\n       'fatalities'],\n      dtype='object')\n\n\nCode\nMarkdown(tabulate( \n    df.head()[columns[:5]],\n    headers=columns[:5],\n    showindex=False\n))\n\n\n\n\n\nevent_date\nyear\nevent_type\nsub_event_type\nactor1\n\n\n\n\n2021-11-04 00:00:00\n2021\nProtests\nPeaceful protest\nProtesters (Ghana)\n\n\n2021-11-03 00:00:00\n2021\nRiots\nViolent demonstration\nRioters (Ghana)\n\n\n2021-11-03 00:00:00\n2021\nProtests\nPeaceful protest\nProtesters (Ghana)\n\n\n2021-11-01 00:00:00\n2021\nRiots\nMob violence\nRioters (Ghana)\n\n\n2021-10-30 00:00:00\n2021\nBattles\nArmed clash\nNadu Warriors Communal Militia (Ghana)\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n# Plot Mapbox location and event type\n\nfig = px.scatter_mapbox(\n    df, # Our DataFrame\n    lat=\"latitude\",\n    lon=\"longitude\",\n    # width=1000, # Width of map\n    # height=700, # Height of map\n    # size=\"fatalities\",\n    color=\"event_type\",\n    # Display notes when hovering mouse over event\n    hover_data=[\"interaction\",\"year\",\"fatalities\",\"location\"], \n)\nfig.update_layout(mapbox_style=\"open-street-map\")\n\n\n\n                        \n                                            \n\n\n\n\n\n\n\n\n\n\nCode\n# number of records\n\nprint(\"event county count:\",df[\"admin1\"].nunique(),\"\\n\",\n    \"event state count:\",df[\"admin2\"].nunique(),\"\\n\",\n    \"event type count:\",df[\"event_type\"].nunique(),\"\\n\",\n    \"event sub_event_type count:\",df[\"sub_event_type\"].nunique())\n\n\nevent county count: 16 \n event state count: 175 \n event type count: 5 \n event sub_event_type count: 16\n\n\nCode\nevent_type=df[\"event_type\"].value_counts()\nevent_type\n\n\n# Interactive with plotly\n\n\nProtests                      486\nRiots                         343\nViolence against civilians    246\nBattles                       165\nStrategic developments         36\nName: event_type, dtype: int64\n\n\nCode\nfig = go.Figure(data=[go.Pie(labels=event_type.index, \n                             values=event_type, \n                             pull=[0.1, 0, 0.2,0, 0])])\nfig.update_layout(\n    title_text=\"&lt;b&gt; Total Type of Event percentage since 1997&lt;b&gt;\",\n    titlefont={'color':None, 'size': 15, 'family': 'San-Serif'},\n    # showlegend=False, \n    # autosize=False,\n    # width=600,\n    # height=400,\n    )\n\n# event and sub_event \n\n\n\n                        \n                                            \n\n\nCode\nsub_event=df.groupby([\"event_type\",\"sub_event_type\"]\n            )[\"event_date\"].agg({'count'}).reset_index()\n\n# sub_event\n\n# Event type and Sub event type visualisation \n\nfig = (px.sunburst(sub_event, \n                  path=['event_type', 'sub_event_type'], \n                  values='count',\n                 width=600, # Width of map\n                height=600,)\n.update_traces(textinfo=\"label+percent parent\")\n.update_layout(\n    title=\"&lt;b&gt; Event type and Sub event type percentage in Ghana (ACLED)&lt;b&gt;\",\n    titlefont={'color':None, 'size': 15, 'family': 'San-Serif'},\n    # showlegend=False, \n    # height=500, \n    # width=750,\n    )\n)\nfig\n\n\n\n                        \n                                            \n\n\n\n\n\n\n\nCode\nactor_type1=df[\"inter1\"].value_counts()\nactor_type1\n\n\nprotesters            483\nrioters               339\ncommunal militias     173\npolitical militias    167\nstate forces           89\nother forces           19\nrebel groups            6\nName: inter1, dtype: int64\n\n\nCode\nactor_type2=df[\"inter2\"].value_counts()\nactor_type2\n\n\nno victicme           503\ncivilians             357\nstate forces          201\ncommunal militias     104\nrioters                68\npolitical militias     35\nother forces            3\nprotesters              3\nrebel groups            2\nName: inter2, dtype: int64\n\n\nCode\nfig = (make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\n.add_trace(go.Pie(labels=actor_type1.index, values=actor_type1,name=\"Actor type1\"),1,1)\n.add_trace(go.Pie(labels=actor_type2.index, values=actor_type2,name=\"Actor type2\"),1,2)\n.update_traces(hole=.6, hoverinfo=\"label+percent+name\") \n.update_layout(\n    title=\"&lt;b&gt; Actor type involved in Ghana conflict&lt;b&gt;\",\n    titlefont={'color':None, 'size': 20, 'family': 'San-Serif'},\n    # showlegend=False, \n    # height=600, \n    # width=1000,\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='&lt;b&gt;instigator', x=0.16, y=0.5,\n                font_size=10, showarrow=False),\n                dict(text='&lt;b&gt;victime/hit back', x=0.88,\n                 y=0.5, font_size=10, showarrow=False)]\n    )\n)\nfig\n\n\n\n                        \n                                            \n\n\n\n\n\nLet look at the trend of conflict\n\n\nCode\nfrom matplotlib.dates import DateFormatter\nimport matplotlib.dates as mdates\n\n# Add labels to the plot\nstyle = dict(size=12, color='black')\n\nfig, ax = plt.subplots(figsize=(17, 7))\n\nnumber_ev=df[\"event_type\"].groupby([df['event_date'].dt.year.rename('year'), \n             df['event_date'].dt.month.rename('month')]).agg({'count'})\n\nnumber_ev.index = [pd.datetime(year, month,1)\n                   for (year,month) in number_ev.index]\n\nnumber_ev.reset_index(inplace=True)\n\nax.plot('index','count', data=number_ev,color=\"b\")\n\n# Format the x axis \nax.xaxis.set_major_locator(mdates.YearLocator(base=1))\n\nax.grid(True)\nplt.ylabel(\"Number of conflict event\")\nplt.title(\"Number of conflict events in Ghana (ACLED)\");\nax\n\n\n\n\n\n\n\n\nBase on previews trend, let subset the data and analyze from 2010 to present day\n\n\nCode\ndf=df[df[\"year\"]&gt;2009]\n\nfig, ax = plt.subplots(figsize=(17, 7))\n\nnumber_ev=df[\"event_type\"].groupby([df['event_date'].dt.year.rename('year'), \n             df['event_date'].dt.month.rename('month')]).agg({'count'})\n\nnumber_ev.index = [pd.datetime(year, month,1)\n                   for (year,month) in number_ev.index]\n\nnumber_ev.reset_index(inplace=True)\n# plot\nax.plot('index','count', data=number_ev,color=\"b\")\n\n# Format the x axis \nax.xaxis.set_major_locator(mdates.YearLocator(base=1))\n\nax.grid(True)\nplt.ylabel(\"Number of conflict event\")\nplt.title(\"Number of conflict events in Ghana (ACLED)\");\nax\n\n\n\n\n\nAnother view using Bar plot\n\n\nCode\nyear_event = pd.crosstab(df.year,df.event_type).reset_index()\n\nfig = px.bar(year_event, x=\"year\", \n             y=[\"Protests\",\"Riots\",\"Violence against civilians\",\"Battles\",\"Strategic developments\"],\n             title=\" &lt;b&gt; Political violence & protest events in Ghana (2010 - 13 nov 2021) &lt;b&gt;\",\n             labels={'value':'Number of Event','variable':'&lt;b&gt;Event Type'} ,\n            # width=1000, # Width of map\n            # height=600\n            )\nfig.update_layout(\n    # barmode='group',  # comment this line to see stacked bar\n    titlefont={'color':None, 'size': 15, 'family': 'San-Serif'},\n    xaxis_tickangle=0,\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 1,\n        dtick = 1\n    )\n)\n\n\n\n                        \n                                            \n\n\n\nWe can see that during 2019 and 2020 each event increase,specialy Protest, Riots,and Battles\n\n\n\nCode\n# event distribution by event_type and county\n\ncounty_event_count=df.pivot_table(index=\"event_type\",\n                                  columns=[\"admin1\"],\n                                  values=\"event_date\",\n                                  aggfunc=\"count\",)\n# county_event_count\n\nfig = px.imshow(county_event_count.fillna(0), \n                text_auto=True,\n                # width=1000,\n                # height=500,\n               aspect=\"auto\",\n               title=\"Heatmap event distribution by event_type and county\")\nfig.update_layout(xaxis_tickangle=90,)\n\n\n\n                        \n                                            \n\n\n\nProtests event occurs most of the time in Greater Accra where Accra Ghana‚Äôs capital is and Ashanti\nMost of Battles occurred in the North part of Ghana ,North East and Northern\n\n\n\n\n\n\nCode\n# fatalities trends using event_date\n\nfig, ax = plt.subplots(figsize=(17, 7))\n\nnumber_fatalities = df[\"fatalities\"].groupby([df['event_date'].dt.year.rename('year'), \n             df['event_date'].dt.month.rename('month')]).agg({'sum'})\n\nnumber_fatalities.index = [pd.datetime(year, month,1)\n                   for (year,month) in number_fatalities.index]\n\nnumber_fatalities.reset_index(inplace=True)\n\nax.plot('index','sum', data=number_fatalities,color=\"r\")\n\n# Format the x axis \nax.xaxis.set_major_locator(mdates.YearLocator(base=1))\n\nax.grid(True)\nplt.ylabel(\"Number of Reported Fatalities\")\nplt.title(\"Number of Reported Fatalities in Ghana (ACLED) \");\n\nax\n\n\n\n\n\nLet have a better look with bar plot\n\n\nCode\n# fig, ax = plt.subplots(figsize=(17, 7))\n# Total repoted fatalities by year\nyear_fatalities=df.groupby(['year',])[['fatalities']].sum()\nyear_fatalities.plot(kind=\"bar\",figsize=(13,7),legend=False,color='dodgerblue')\na=list(year_fatalities.fatalities)\nfor index,i in enumerate(a):   \n    y= str(round(i))\n    plt.annotate(y,xy=(index,i),xycoords='data',bbox=dict(boxstyle=\"round\", fc=\"white\", ec=\"gray\"),\n             xytext=(0,-2),textcoords='offset points', ha='center')\nsns.set_style(\"white\")\nplt.xlabel(\"Year \")\nplt.ylabel(\"repoted fatalities \")\n# plt.xticks(rotation=0)\nplt.xticks([0,1,2,3,4,5,6,7,8,9,10,11],['2010','2011','2012','2013','2014',\n     '2015','2016','2017','2018','2019','2020','2021 \\n (1 Jan - 13  NOV)'] ,rotation=0);\nplt.title(\"Total repoted fatalities by year\", );\nsns.despine()\nplt.show()\n\n\n\n\n\nCode\nfig = (make_subplots(specs=[[{\"secondary_y\": True}]])\n\n.add_trace(go.Scatter(y=number_fatalities[\"sum\"],\n                         x=number_fatalities[\"index\"],\n                         name = 'Fatalities',\n                         line=dict(color='red', width=4, dash='dot')\n                         )\n             )\n.add_trace(go.Scatter(y=number_ev[\"count\"],\n                         x=number_ev[\"index\"] ,\n                         name = 'Event count',\n                         line=dict(color='darkblue', width=2, dash='solid')\n                         ),\n              secondary_y=True,\n             )\n\n.update_layout(title='&lt;b&gt; Fatalities & Event in Ghana&lt;b&gt;',\n                  xaxis_title='&lt;b&gt;years&lt;b&gt;',\n                  yaxis_title='&lt;b&gt;Reported fatalities &lt;b&gt;',\n                  titlefont={'size': 15, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  paper_bgcolor='#edeeee',\n                  plot_bgcolor='#edeeee',\n                #   width=1000,\n                #    height=500,\n                 )\n\n)\nfig.update_yaxes(title_text=\"&lt;b&gt; Event count&lt;/b&gt;\", secondary_y=True)\n\n\n\n                        \n                                            \n\n\n\n\n\nLet zoom-in in year 2017 and see what happen\n\n\nCode\n\n# Total fatalities  by event_type and county\n\nE2017=df[df[\"year\"]==2017] .pivot_table(index=\"interaction\",\n                                  columns=[\"event_type\"],\n                                  values=\"fatalities\",\n                                  aggfunc=\"sum\",)\nE2017.drop([col for col, val in E2017.sum().iteritems() if val &lt; 1], axis=1, inplace=True)\nE2017.drop([col for col, val in E2017.sum(axis=1).iteritems() if val &lt; 1], axis=0, inplace=True)\n# E2017\n\nfig = px.imshow(E2017.fillna(0), \n                text_auto=True,\n                width=600,\n                    height=600,\n               aspect=\"auto\",\n              title=\"&lt;b&gt;Heatmap of total fatalities by event_type and interaction in 2017&lt;b&gt;\")\nfig.update_layout(xaxis_tickangle=45,\n                 titlefont={'size': 15, 'family':'Serif'},)\n           \n\n\n\n                        \n                                            \n\n\n\nWe can see that during year 2017 Battles and Violence against civilians cause the most death. From the heatmap the interaction between communal militia against communal militia cause the most death in Battles and also the most death of civilians is perpetrator by communal militia. This show that , communal militia cause more than 85% of the total reported fatalities in 2017.\n\nLet look at all the ten past years\n\n\nCode\n## Total fatalities  by event_type and county\n\nevent_interaction = df.pivot_table(index=\"event_type\",\n                                  columns=[\"interaction\"],\n                                  values=\"fatalities\",\n                                  aggfunc=\"sum\",)\nevent_interaction.drop([col for col, val in event_interaction.sum().iteritems() if val &lt; 1], axis=1, inplace=True)\nevent_interaction.drop([col for col, val in event_interaction.sum(axis=1).iteritems() if val &lt; 1], axis=0, inplace=True)\n# event_interaction\n\nfig = px.imshow(event_interaction.fillna(0), \n                text_auto=True,\n                # width=1000,\n                #     height=500,\n               aspect=\"auto\",\n              title=\"&lt;b&gt;Heatmap of total fatalities by event_type and interaction&lt;b&gt;\")\nfig.update_layout(xaxis_tickangle=45,\n                 titlefont={'size': 15, 'family':'Serif'},)\n\n\n\n# Total fatalities  by event_type and county\n\n\n\n                        \n                                            \n\n\nCode\ncounty_fataliy=df.pivot_table(index=\"event_type\",\n                                  columns=[\"admin1\"],\n                                  values=\"fatalities\",\n                                  aggfunc=\"sum\",)\n\nfig = px.imshow(county_fataliy.fillna(0), \n                text_auto=True,\n                # width=1000,\n                #     height=500,\n               aspect=\"auto\",\n              title=\"&lt;b&gt;Heatmap of total fatalities by event_type and county&lt;b&gt;\")\nfig.update_layout(xaxis_tickangle=90,\n                 titlefont={'size': 15, 'family':'Serif'},)\n\n\n\n                        \n                                            \n\n\n\nBattles is the event with high reported fatalities during this past ten years, following by violence against civilians which occurs most of the time at the North part of Ghana, the center part and the capital as well\n\nLet look deeper into Battles\n\n\nCode\nBattles = df[df[\"event_type\"]==\"Battles\"]\nbattles_event = pd.crosstab(Battles['year'],Battles['interaction']).reset_index()\n# battles_event\n\nfig = px.bar(battles_event, x=\"year\", \n             y=battles_event.columns[1:],\n             title=\"&lt;b&gt;Interaction in Battles events in Ghana (2010 - 13 nov 2021)&lt;b&gt;\",\n             labels={'value':'Number of Event','variable':'&lt;b&gt;Interaction'} ,\n            # width=1000, # Width of map\n            # height=600\n            )\nfig.update_layout(titlefont={'size': 15, 'family':'Serif'},\n    # barmode='group',  # comment this line to see stacked bar\n    xaxis_tickangle=0,\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 1,\n        dtick = 1\n    )\n)\n\n\n\n                        \n                                            \n\n\n\nMost of battles each year are communal militia against communal militia (inter and intra communal violence), except in 2010 and 2011.\nThis show instability in the country at local level. The multitude of ethnic armed clash each year is not negligible when Ghana country, compared to many other African countries, has been described as a peaceful and stable country.\n\nlet look at the actor involved in those ethnic conflict\n\n\nCode\n\nethnic_conflict=df[df[\"interaction\"]==\"communal militia versus communal militia\"]\n\n# let combine actor1 and actor2 together \nact = ethnic_conflict[\"actor1\"].to_list() +  ethnic_conflict[\"actor2\"].to_list()\nact=pd.DataFrame(act,columns=[\"actor\"])\n\nfig, ax = plt.subplots(figsize=(13, 7))\n\n# Set the color palette in reverse\ncolors = sns.color_palette('Reds', len(act.actor.value_counts().index[0:20]))\ncolors.reverse()\n\n\n\n# plot Ethnic conflict to 20 actor involved\nax = sns.countplot(y=act.actor, order =act.actor.value_counts().index[0:20], palette=colors)\nax.set(ylabel=None, xlabel=None,);\nplt.title(\"Ethnic conflicts - Top 20 actor involved\");\nsns.despine()\nplt.tight_layout(pad=1, w_pad=1, h_pad=1)\nax\n\n\n\n\n\n\nTop 20 actor involved in those ethnic conflict are minority ethnic groups in Ghana\n\n\n\n\n\nhttps://github.com/AbdelTID/Armed-Conflict-Event"
  },
  {
    "objectID": "project/2022/1/10/index.html#notebook-configuration",
    "href": "project/2022/1/10/index.html#notebook-configuration",
    "title": "Political and Conflict Event in Ghana",
    "section": "",
    "text": "Code\nimport warnings\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport altair as alt\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\n\nfrom Wrangledata import wrangle #Our function\n\n# Number of rows and columns\npd.set_option('display.max_rows', 150)\npd.set_option('display.max_columns', 150)\npd.set_option('display.max_colwidth', 500)"
  },
  {
    "objectID": "project/2022/1/10/index.html#load-data",
    "href": "project/2022/1/10/index.html#load-data",
    "title": "Political & Conflict Event in Ghana",
    "section": "",
    "text": "Code\n# Load data\ndataset_name = 'data/1980-11-04-2021-11-13-Ghana.csv'\ndf = wrangle(dataset_name)\n\n\n\n\nThe data frame contains 18 attributes, and 1,276 observations.\n\n\nCode\nprint(\"Shape of the data:\", df.shape)\n\n\nShape of the data: (1276, 18)\n\n\nCode\nRows,Cols=df.shape\ncolumns = df.columns\n# show first 5 columns and rows\nMarkdown(tabulate( \n    df.head()[columns[:5]],\n    headers=columns[:5],\n    showindex=False\n))\n\n\n\n\n\nevent_date\nyear\nevent_type\nsub_event_type\nactor1\n\n\n\n\n2021-11-04 00:00:00\n2021\nProtests\nPeaceful protest\nProtesters (Ghana)\n\n\n2021-11-03 00:00:00\n2021\nRiots\nViolent demonstration\nRioters (Ghana)\n\n\n2021-11-03 00:00:00\n2021\nProtests\nPeaceful protest\nProtesters (Ghana)\n\n\n2021-11-01 00:00:00\n2021\nRiots\nMob violence\nRioters (Ghana)\n\n\n2021-10-30 00:00:00\n2021\nBattles\nArmed clash\nNadu Warriors Communal Militia (Ghana)"
  },
  {
    "objectID": "project/2022/1/10/index.html#data",
    "href": "project/2022/1/10/index.html#data",
    "title": "Political and Conflict Event in Ghana",
    "section": "",
    "text": "Code\n# Load data\ndataset_name = 'data/1980-11-04-2021-11-13-Ghana.csv'\ndf = wrangle(dataset_name)\n\n\n\n\nThe data frame contains 18 attributes, and 1,276 observations.\n\n\nCode\nprint(\"Shape of the data:\", df.shape)\n\n\nShape of the data: (1276, 18)\n\n\nCode\nRows,Cols=df.shape\n\n# Data columns\ncolumns = df.columns\nprint(\"Data columns :\\n\",columns)\n\n# show first 5 columns and rows\n\n\nData columns :\n Index(['event_date', 'year', 'event_type', 'sub_event_type', 'actor1',\n       'inter1', 'actor2', 'inter2', 'interaction', 'admin1', 'admin2',\n       'location', 'latitude', 'longitude', 'source', 'source_scale', 'notes',\n       'fatalities'],\n      dtype='object')\n\n\nCode\nMarkdown(tabulate( \n    df.head()[columns[:5]],\n    headers=columns[:5],\n    showindex=False\n))\n\n\n\n\n\nevent_date\nyear\nevent_type\nsub_event_type\nactor1\n\n\n\n\n2021-11-04 00:00:00\n2021\nProtests\nPeaceful protest\nProtesters (Ghana)\n\n\n2021-11-03 00:00:00\n2021\nRiots\nViolent demonstration\nRioters (Ghana)\n\n\n2021-11-03 00:00:00\n2021\nProtests\nPeaceful protest\nProtesters (Ghana)\n\n\n2021-11-01 00:00:00\n2021\nRiots\nMob violence\nRioters (Ghana)\n\n\n2021-10-30 00:00:00\n2021\nBattles\nArmed clash\nNadu Warriors Communal Militia (Ghana)\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n# Plot Mapbox location and event type\n\nfig = px.scatter_mapbox(\n    df, # Our DataFrame\n    lat=\"latitude\",\n    lon=\"longitude\",\n    # width=1000, # Width of map\n    # height=700, # Height of map\n    # size=\"fatalities\",\n    color=\"event_type\",\n    # Display notes when hovering mouse over event\n    hover_data=[\"interaction\",\"year\",\"fatalities\",\"location\"], \n)\nfig.update_layout(mapbox_style=\"open-street-map\")"
  },
  {
    "objectID": "project/2022/1/10/index.html#data-exploratory",
    "href": "project/2022/1/10/index.html#data-exploratory",
    "title": "Political and Conflict Event in Ghana",
    "section": "",
    "text": "Code\n# number of records\n\nprint(\"event county count:\",df[\"admin1\"].nunique(),\"\\n\",\n    \"event state count:\",df[\"admin2\"].nunique(),\"\\n\",\n    \"event type count:\",df[\"event_type\"].nunique(),\"\\n\",\n    \"event sub_event_type count:\",df[\"sub_event_type\"].nunique())\n\n\nevent county count: 16 \n event state count: 175 \n event type count: 5 \n event sub_event_type count: 16\n\n\nCode\nevent_type=df[\"event_type\"].value_counts()\nevent_type\n\n\n# Interactive with plotly\n\n\nProtests                      486\nRiots                         343\nViolence against civilians    246\nBattles                       165\nStrategic developments         36\nName: event_type, dtype: int64\n\n\nCode\nfig = go.Figure(data=[go.Pie(labels=event_type.index, \n                             values=event_type, \n                             pull=[0.1, 0, 0.2,0, 0])])\nfig.update_layout(\n    title_text=\"&lt;b&gt; Total Type of Event percentage since 1997&lt;b&gt;\",\n    titlefont={'color':None, 'size': 15, 'family': 'San-Serif'},\n    # showlegend=False, \n    # autosize=False,\n    # width=600,\n    # height=400,\n    )\n\n# event and sub_event \n\n\n\n                        \n                                            \n\n\nCode\nsub_event=df.groupby([\"event_type\",\"sub_event_type\"]\n            )[\"event_date\"].agg({'count'}).reset_index()\n\n# sub_event\n\n# Event type and Sub event type visualisation \n\nfig = (px.sunburst(sub_event, \n                  path=['event_type', 'sub_event_type'], \n                  values='count',\n                 width=600, # Width of map\n                height=600,)\n.update_traces(textinfo=\"label+percent parent\")\n.update_layout(\n    title=\"&lt;b&gt; Event type and Sub event type percentage in Ghana (ACLED)&lt;b&gt;\",\n    titlefont={'color':None, 'size': 15, 'family': 'San-Serif'},\n    # showlegend=False, \n    # height=500, \n    # width=750,\n    )\n)\nfig\n\n\n\n                        \n                                            \n\n\n\n\n\n\n\nCode\nactor_type1=df[\"inter1\"].value_counts()\nactor_type1\n\n\nprotesters            483\nrioters               339\ncommunal militias     173\npolitical militias    167\nstate forces           89\nother forces           19\nrebel groups            6\nName: inter1, dtype: int64\n\n\nCode\nactor_type2=df[\"inter2\"].value_counts()\nactor_type2\n\n\nno victicme           503\ncivilians             357\nstate forces          201\ncommunal militias     104\nrioters                68\npolitical militias     35\nother forces            3\nprotesters              3\nrebel groups            2\nName: inter2, dtype: int64\n\n\nCode\nfig = (make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\n.add_trace(go.Pie(labels=actor_type1.index, values=actor_type1,name=\"Actor type1\"),1,1)\n.add_trace(go.Pie(labels=actor_type2.index, values=actor_type2,name=\"Actor type2\"),1,2)\n.update_traces(hole=.6, hoverinfo=\"label+percent+name\") \n.update_layout(\n    title=\"&lt;b&gt; Actor type involved in Ghana conflict&lt;b&gt;\",\n    titlefont={'color':None, 'size': 20, 'family': 'San-Serif'},\n    # showlegend=False, \n    # height=600, \n    # width=1000,\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='&lt;b&gt;instigator', x=0.16, y=0.5,\n                font_size=10, showarrow=False),\n                dict(text='&lt;b&gt;victime/hit back', x=0.88,\n                 y=0.5, font_size=10, showarrow=False)]\n    )\n)\nfig\n\n\n\n                        \n                                            \n\n\n\n\n\nLet look at the trend of conflict\n\n\nCode\nfrom matplotlib.dates import DateFormatter\nimport matplotlib.dates as mdates\n\n# Add labels to the plot\nstyle = dict(size=12, color='black')\n\nfig, ax = plt.subplots(figsize=(17, 7))\n\nnumber_ev=df[\"event_type\"].groupby([df['event_date'].dt.year.rename('year'), \n             df['event_date'].dt.month.rename('month')]).agg({'count'})\n\nnumber_ev.index = [pd.datetime(year, month,1)\n                   for (year,month) in number_ev.index]\n\nnumber_ev.reset_index(inplace=True)\n\nax.plot('index','count', data=number_ev,color=\"b\")\n\n# Format the x axis \nax.xaxis.set_major_locator(mdates.YearLocator(base=1))\n\nax.grid(True)\nplt.ylabel(\"Number of conflict event\")\nplt.title(\"Number of conflict events in Ghana (ACLED)\");\nax\n\n\n\n\n\n\n\n\nBase on previews trend, let subset the data and analyze from 2010 to present day\n\n\nCode\ndf=df[df[\"year\"]&gt;2009]\n\nfig, ax = plt.subplots(figsize=(17, 7))\n\nnumber_ev=df[\"event_type\"].groupby([df['event_date'].dt.year.rename('year'), \n             df['event_date'].dt.month.rename('month')]).agg({'count'})\n\nnumber_ev.index = [pd.datetime(year, month,1)\n                   for (year,month) in number_ev.index]\n\nnumber_ev.reset_index(inplace=True)\n# plot\nax.plot('index','count', data=number_ev,color=\"b\")\n\n# Format the x axis \nax.xaxis.set_major_locator(mdates.YearLocator(base=1))\n\nax.grid(True)\nplt.ylabel(\"Number of conflict event\")\nplt.title(\"Number of conflict events in Ghana (ACLED)\");\nax\n\n\n\n\n\nAnother view using Bar plot\n\n\nCode\nyear_event = pd.crosstab(df.year,df.event_type).reset_index()\n\nfig = px.bar(year_event, x=\"year\", \n             y=[\"Protests\",\"Riots\",\"Violence against civilians\",\"Battles\",\"Strategic developments\"],\n             title=\" &lt;b&gt; Political violence & protest events in Ghana (2010 - 13 nov 2021) &lt;b&gt;\",\n             labels={'value':'Number of Event','variable':'&lt;b&gt;Event Type'} ,\n            # width=1000, # Width of map\n            # height=600\n            )\nfig.update_layout(\n    # barmode='group',  # comment this line to see stacked bar\n    titlefont={'color':None, 'size': 15, 'family': 'San-Serif'},\n    xaxis_tickangle=0,\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 1,\n        dtick = 1\n    )\n)\n\n\n\n                        \n                                            \n\n\n\nWe can see that during 2019 and 2020 each event increase,specialy Protest, Riots,and Battles\n\n\n\nCode\n# event distribution by event_type and county\n\ncounty_event_count=df.pivot_table(index=\"event_type\",\n                                  columns=[\"admin1\"],\n                                  values=\"event_date\",\n                                  aggfunc=\"count\",)\n# county_event_count\n\nfig = px.imshow(county_event_count.fillna(0), \n                text_auto=True,\n                # width=1000,\n                # height=500,\n               aspect=\"auto\",\n               title=\"Heatmap event distribution by event_type and county\")\nfig.update_layout(xaxis_tickangle=90,)\n\n\n\n                        \n                                            \n\n\n\nProtests event occurs most of the time in Greater Accra where Accra Ghana‚Äôs capital is and Ashanti\nMost of Battles occurred in the North part of Ghana ,North East and Northern\n\n\n\n\n\n\nCode\n# fatalities trends using event_date\n\nfig, ax = plt.subplots(figsize=(17, 7))\n\nnumber_fatalities = df[\"fatalities\"].groupby([df['event_date'].dt.year.rename('year'), \n             df['event_date'].dt.month.rename('month')]).agg({'sum'})\n\nnumber_fatalities.index = [pd.datetime(year, month,1)\n                   for (year,month) in number_fatalities.index]\n\nnumber_fatalities.reset_index(inplace=True)\n\nax.plot('index','sum', data=number_fatalities,color=\"r\")\n\n# Format the x axis \nax.xaxis.set_major_locator(mdates.YearLocator(base=1))\n\nax.grid(True)\nplt.ylabel(\"Number of Reported Fatalities\")\nplt.title(\"Number of Reported Fatalities in Ghana (ACLED) \");\n\nax\n\n\n\n\n\nLet have a better look with bar plot\n\n\nCode\n# fig, ax = plt.subplots(figsize=(17, 7))\n# Total repoted fatalities by year\nyear_fatalities=df.groupby(['year',])[['fatalities']].sum()\nyear_fatalities.plot(kind=\"bar\",figsize=(13,7),legend=False,color='dodgerblue')\na=list(year_fatalities.fatalities)\nfor index,i in enumerate(a):   \n    y= str(round(i))\n    plt.annotate(y,xy=(index,i),xycoords='data',bbox=dict(boxstyle=\"round\", fc=\"white\", ec=\"gray\"),\n             xytext=(0,-2),textcoords='offset points', ha='center')\nsns.set_style(\"white\")\nplt.xlabel(\"Year \")\nplt.ylabel(\"repoted fatalities \")\n# plt.xticks(rotation=0)\nplt.xticks([0,1,2,3,4,5,6,7,8,9,10,11],['2010','2011','2012','2013','2014',\n     '2015','2016','2017','2018','2019','2020','2021 \\n (1 Jan - 13  NOV)'] ,rotation=0);\nplt.title(\"Total repoted fatalities by year\", );\nsns.despine()\nplt.show()\n\n\n\n\n\nCode\nfig = (make_subplots(specs=[[{\"secondary_y\": True}]])\n\n.add_trace(go.Scatter(y=number_fatalities[\"sum\"],\n                         x=number_fatalities[\"index\"],\n                         name = 'Fatalities',\n                         line=dict(color='red', width=4, dash='dot')\n                         )\n             )\n.add_trace(go.Scatter(y=number_ev[\"count\"],\n                         x=number_ev[\"index\"] ,\n                         name = 'Event count',\n                         line=dict(color='darkblue', width=2, dash='solid')\n                         ),\n              secondary_y=True,\n             )\n\n.update_layout(title='&lt;b&gt; Fatalities & Event in Ghana&lt;b&gt;',\n                  xaxis_title='&lt;b&gt;years&lt;b&gt;',\n                  yaxis_title='&lt;b&gt;Reported fatalities &lt;b&gt;',\n                  titlefont={'size': 15, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  paper_bgcolor='#edeeee',\n                  plot_bgcolor='#edeeee',\n                #   width=1000,\n                #    height=500,\n                 )\n\n)\nfig.update_yaxes(title_text=\"&lt;b&gt; Event count&lt;/b&gt;\", secondary_y=True)\n\n\n\n                        \n                                            \n\n\n\n\n\nLet zoom-in in year 2017 and see what happen\n\n\nCode\n\n# Total fatalities  by event_type and county\n\nE2017=df[df[\"year\"]==2017] .pivot_table(index=\"interaction\",\n                                  columns=[\"event_type\"],\n                                  values=\"fatalities\",\n                                  aggfunc=\"sum\",)\nE2017.drop([col for col, val in E2017.sum().iteritems() if val &lt; 1], axis=1, inplace=True)\nE2017.drop([col for col, val in E2017.sum(axis=1).iteritems() if val &lt; 1], axis=0, inplace=True)\n# E2017\n\nfig = px.imshow(E2017.fillna(0), \n                text_auto=True,\n                width=600,\n                    height=600,\n               aspect=\"auto\",\n              title=\"&lt;b&gt;Heatmap of total fatalities by event_type and interaction in 2017&lt;b&gt;\")\nfig.update_layout(xaxis_tickangle=45,\n                 titlefont={'size': 15, 'family':'Serif'},)\n           \n\n\n\n                        \n                                            \n\n\n\nWe can see that during year 2017 Battles and Violence against civilians cause the most death. From the heatmap the interaction between communal militia against communal militia cause the most death in Battles and also the most death of civilians is perpetrator by communal militia. This show that , communal militia cause more than 85% of the total reported fatalities in 2017.\n\nLet look at all the ten past years\n\n\nCode\n## Total fatalities  by event_type and county\n\nevent_interaction = df.pivot_table(index=\"event_type\",\n                                  columns=[\"interaction\"],\n                                  values=\"fatalities\",\n                                  aggfunc=\"sum\",)\nevent_interaction.drop([col for col, val in event_interaction.sum().iteritems() if val &lt; 1], axis=1, inplace=True)\nevent_interaction.drop([col for col, val in event_interaction.sum(axis=1).iteritems() if val &lt; 1], axis=0, inplace=True)\n# event_interaction\n\nfig = px.imshow(event_interaction.fillna(0), \n                text_auto=True,\n                # width=1000,\n                #     height=500,\n               aspect=\"auto\",\n              title=\"&lt;b&gt;Heatmap of total fatalities by event_type and interaction&lt;b&gt;\")\nfig.update_layout(xaxis_tickangle=45,\n                 titlefont={'size': 15, 'family':'Serif'},)\n\n\n\n# Total fatalities  by event_type and county\n\n\n\n                        \n                                            \n\n\nCode\ncounty_fataliy=df.pivot_table(index=\"event_type\",\n                                  columns=[\"admin1\"],\n                                  values=\"fatalities\",\n                                  aggfunc=\"sum\",)\n\nfig = px.imshow(county_fataliy.fillna(0), \n                text_auto=True,\n                # width=1000,\n                #     height=500,\n               aspect=\"auto\",\n              title=\"&lt;b&gt;Heatmap of total fatalities by event_type and county&lt;b&gt;\")\nfig.update_layout(xaxis_tickangle=90,\n                 titlefont={'size': 15, 'family':'Serif'},)\n\n\n\n                        \n                                            \n\n\n\nBattles is the event with high reported fatalities during this past ten years, following by violence against civilians which occurs most of the time at the North part of Ghana, the center part and the capital as well\n\nLet look deeper into Battles\n\n\nCode\nBattles = df[df[\"event_type\"]==\"Battles\"]\nbattles_event = pd.crosstab(Battles['year'],Battles['interaction']).reset_index()\n# battles_event\n\nfig = px.bar(battles_event, x=\"year\", \n             y=battles_event.columns[1:],\n             title=\"&lt;b&gt;Interaction in Battles events in Ghana (2010 - 13 nov 2021)&lt;b&gt;\",\n             labels={'value':'Number of Event','variable':'&lt;b&gt;Interaction'} ,\n            # width=1000, # Width of map\n            # height=600\n            )\nfig.update_layout(titlefont={'size': 15, 'family':'Serif'},\n    # barmode='group',  # comment this line to see stacked bar\n    xaxis_tickangle=0,\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 1,\n        dtick = 1\n    )\n)\n\n\n\n                        \n                                            \n\n\n\nMost of battles each year are communal militia against communal militia (inter and intra communal violence), except in 2010 and 2011.\nThis show instability in the country at local level. The multitude of ethnic armed clash each year is not negligible when Ghana country, compared to many other African countries, has been described as a peaceful and stable country.\n\nlet look at the actor involved in those ethnic conflict\n\n\nCode\n\nethnic_conflict=df[df[\"interaction\"]==\"communal militia versus communal militia\"]\n\n# let combine actor1 and actor2 together \nact = ethnic_conflict[\"actor1\"].to_list() +  ethnic_conflict[\"actor2\"].to_list()\nact=pd.DataFrame(act,columns=[\"actor\"])\n\nfig, ax = plt.subplots(figsize=(13, 7))\n\n# Set the color palette in reverse\ncolors = sns.color_palette('Reds', len(act.actor.value_counts().index[0:20]))\ncolors.reverse()\n\n\n\n# plot Ethnic conflict to 20 actor involved\nax = sns.countplot(y=act.actor, order =act.actor.value_counts().index[0:20], palette=colors)\nax.set(ylabel=None, xlabel=None,);\nplt.title(\"Ethnic conflicts - Top 20 actor involved\");\nsns.despine()\nplt.tight_layout(pad=1, w_pad=1, h_pad=1)\nax\n\n\n\n\n\n\nTop 20 actor involved in those ethnic conflict are minority ethnic groups in Ghana"
  },
  {
    "objectID": "project/2022/1/10/index.html#view-project-repo",
    "href": "project/2022/1/10/index.html#view-project-repo",
    "title": "Political and Conflict Event in Ghana",
    "section": "",
    "text": "https://github.com/AbdelTID/Armed-Conflict-Event"
  },
  {
    "objectID": "about/index.html#last-talk",
    "href": "about/index.html#last-talk",
    "title": "Hi There! Welcome.",
    "section": "LAST TALK",
    "text": "LAST TALK\n\n\n            \n                \n                    \n                \n                \n                    \n                        Political Economy T.A session \n                    \n                    \n                        Oct 31, 2022 ‚àô \n                        African School of Economics, Abomey-Calavi\n                    \n                    I Provided training and guidance in Python and R for data analysis and visualization of Political and Conflict Events using ACLED data.\n                    \n                        \n                            \n                                 Slides\n                            \n                        \n                    \n                \n            \n\n\nNo matching items\n\n\n\nSee All ‚Üí"
  }
]